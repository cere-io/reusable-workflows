name: Build Docker image and push.

on:
  workflow_call:
    inputs:
      runs-on:
        required: true
        description: Platform to execute on
        type: string

      push-to-public-dockerhub:
        required: false
        type: boolean
        default: false
        description: Is docker image should be pushed to
      org:
        required: false
        type: string
      image:
        required: false
        type: string
      file:
        required: false
        type: string
        default: ./Dockerfile
      context:
        required: false
        type: string
        default: ./

      environment:
        required: true
        type: string
      repository:
        required: false
        default: crb-${{ github.event.repository.name }}
        type: string
    secrets:
      ORG_AWS_ACCESS_KEY_ID:
        required: true
      ORG_AWS_SECRET_ACCESS_KEY:
        required: true
      DOCKERHUB_USERNAME:
        required: true
      DOCKERHUB_TOKEN:
        required: true
      AWS_REGION:
        required: true
      NPM_TOKEN:
        required: false

    outputs:
      version:
        description: Docker image tag.
        value: ${{ jobs.build-docker-image-and-push-to-registers.outputs.version }}

jobs:
  build-docker-image-and-push-to-registers:
    name: Build docker image, push to both aws and dockerhub registers.
    runs-on: ${{ fromJSON(inputs.runs-on) }}
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v3

      - name: Process version
        id: version
        run: |
          echo "::set-output name=version::${{ inputs.environment }}-${{ github.run_attempt}}-$(git rev-parse --short HEAD)"

      - name: Configure AWS credentials for push images
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.ORG_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.ORG_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build and push docker image (private & public repos)
        if: ${{ inputs.push-to-public-dockerhub }}
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ inputs.repository }}
        uses: docker/build-push-action@v2
        with:
          context: ${{ inputs.context }}
          file: ${{ inputs.file }}
          push: true
          no-cache: true
          build-args: |
            NPM_TOKEN=${{ secrets.NPM_TOKEN }}
            ENV_FILE_NAME=${{ inputs.environment }}
          tags: |
            ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ steps.version.outputs.version }}
            ${{ inputs.org }}/${{ inputs.image }}:${{ steps.version.outputs.version }}
            ${{ inputs.org }}/${{ inputs.image }}:${{ inputs.environment }}-latest

      - name: Build and push docker image (private repo)
        if: ${{ !inputs.push-to-public-dockerhub }}
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ inputs.repository }}
        uses: docker/build-push-action@v2
        with:
          context: ${{ inputs.context }}
          file: ${{ inputs.file }}
          push: true
          no-cache: true
          build-args: |
            NPM_TOKEN=${{ secrets.NPM_TOKEN }}
            ENV_FILE_NAME=${{ inputs.environment }}
          tags: |
            ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ steps.version.outputs.version }}