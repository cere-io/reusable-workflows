name: Build Docker image and push.

on:
  workflow_call:
    inputs:
      runs-on:
        required: true
        description: Platform to execute on
        type: string
      build_container:
        required: true
        description: Base image to build
        type: string
      deploy_container:
        required: true
        description: Base image to deploy
        type: string
      install_packages_command:
        required: true
        description: Command to install packages
        type: string
      build_command:
        required: true
        description: Build command
        type: string
      path_to_static_files_to_upload:
        required: true
        description: Path to files to upload
        type: string
      build_static_files:
        required: false
        default: true
        description: Build static files?
        type: boolean
      client_path:
        required: false
        default: "."
        type: string
      install_dependencies_command:
        required: false
        default: apt update; apt install -y python3 libpq-dev make build-essential git
        type: string
      s3_sync_command:
        required: false
        default: aws s3 sync --metadata-directive="REPLACE" --exclude ".*" build/${{ inputs.path_to_static_files_to_upload }}/ s3://${S3_BUCKET}
        type: string

      inject_ssm_secrets:
        required: false
        default: false
        description: Inject ssm secrets?
        type: boolean
      ssm_environment:
        required: false
        type: string
      stacking_lp:
        required: false
        type: string

    secrets:
      NETWORK_AWS_ACCESS_KEY_ID:
        required: true
      NETWORK_AWS_SECRET_ACCESS_KEY:
        required: true
      AWS_REGION:
        required: true
      S3_BUCKET_NAME:
        required: true
      CF_DISTRIBUTION_ID:
        required: true
      NPM_TOKEN:
        required: false

jobs:
  build-static-files:
    if: ${{ inputs.build_static_files }}
    name: Build static files
    runs-on: ${{ fromJSON(inputs.runs-on) }}
    container:
      image: ${{ inputs.build_container }}
    steps:
      - uses: actions/checkout@v3
      - name: Install system packages
        run: ${{ inputs.install_dependencies_command }}
      - name: Restore cache
        uses: actions/cache@v2
        with:
          path: '${{ inputs.client_path }}/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('${{ inputs.client_path }}/yarn.lock') }}
      - name: Install packages
        working-directory: ${{ inputs.client_path }}
        run: ${{ inputs.install_packages_command }}
        env:
          NPM_TOKEN: ${{secrets.NPM_TOKEN}}

      - name: Configure AWS Credentials
        if: ${{ inputs.inject_ssm_secrets }}
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.NETWORK_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.NETWORK_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Inject REACT_APP_CHAIN_ID
        if: ${{ inputs.inject_ssm_secrets }}
        uses: marvinpinto/action-inject-ssm-secrets@latest
        with:
          ssm_parameter: "/${{ inputs.ssm_environment }}-cere-staking-${{ inputs.stacking_lp  }}-REACT_APP_CHAIN_ID"
          env_variable_name: "REACT_APP_CHAIN_ID"

      - name: Inject REACT_APP_STAKING_REWARDS_ADDRESS
        if: ${{ inputs.inject_ssm_secrets }}
        uses: marvinpinto/action-inject-ssm-secrets@latest
        with:
          ssm_parameter: "/${{ inputs.ssm_environment }}-cere-staking-${{ inputs.stacking_lp  }}-REACT_APP_STAKING_REWARDS_ADDRESS"
          env_variable_name: "REACT_APP_STAKING_REWARDS_ADDRESS"

      - name: Inject REACT_APP_PAIR_CONTRACT_ADDRESS
        if: ${{ inputs.inject_ssm_secrets }}
        uses: marvinpinto/action-inject-ssm-secrets@latest
        with:
          ssm_parameter: "/${{ inputs.ssm_environment }}-cere-staking-${{ inputs.stacking_lp  }}-REACT_APP_PAIR_CONTRACT_ADDRESS"
          env_variable_name: "REACT_APP_PAIR_CONTRACT_ADDRESS"

      - name: Inject REACT_APP_NETWORK_URL
        if: ${{ inputs.inject_ssm_secrets }}
        uses: marvinpinto/action-inject-ssm-secrets@latest
        with:
          ssm_parameter: "/${{ inputs.ssm_environment }}-cere-staking-${{ inputs.stacking_lp  }}-REACT_APP_NETWORK_URL"
          env_variable_name: "REACT_APP_NETWORK_URL"

      - name: Inject REACT_APP_UNISWAP_CURRENCY_PAIR_URL
        if: ${{ inputs.inject_ssm_secrets }}
        uses: marvinpinto/action-inject-ssm-secrets@latest
        with:
          ssm_parameter: "/${{ inputs.ssm_environment }}-cere-staking-${{ inputs.stacking_lp  }}-REACT_APP_UNISWAP_CURRENCY_PAIR_URL"
          env_variable_name: "REACT_APP_UNISWAP_CURRENCY_PAIR_URL"

      - name: Inject REACT_APP_STAKING_MODE
        if: ${{ inputs.inject_ssm_secrets }}
        uses: marvinpinto/action-inject-ssm-secrets@latest
        with:
          ssm_parameter: "/${{ inputs.ssm_environment }}-cere-staking-${{ inputs.stacking_lp  }}-REACT_APP_STAKING_MODE"
          env_variable_name: "REACT_APP_STAKING_MODE"

      - name: Inject REACT_APP_STAKING_TOTAL_REWARD
        if: ${{ inputs.inject_ssm_secrets }}
        uses: marvinpinto/action-inject-ssm-secrets@latest
        with:
          ssm_parameter: "/${{ inputs.ssm_environment }}-cere-staking-${{ inputs.stacking_lp  }}-REACT_APP_STAKING_TOTAL_REWARD"
          env_variable_name: "REACT_APP_STAKING_TOTAL_REWARD"

      - name: Inject REACT_APP_STAKING_CAMPAIGN_DURATION_IN_DAYS
        if: ${{ inputs.inject_ssm_secrets }}
        uses: marvinpinto/action-inject-ssm-secrets@latest
        with:
          ssm_parameter: "/${{ inputs.ssm_environment }}-cere-staking-${{ inputs.stacking_lp  }}-REACT_APP_STAKING_CAMPAIGN_DURATION_IN_DAYS"
          env_variable_name: "REACT_APP_STAKING_CAMPAIGN_DURATION_IN_DAYS"

      - name: Inject INFURA_PROJECT_ID
        if: ${{ inputs.inject_ssm_secrets }}
        uses: marvinpinto/action-inject-ssm-secrets@latest
        with:
          ssm_parameter: "/${{ inputs.ssm_environment }}-cere-staking-${{ inputs.stacking_lp  }}-INFURA_PROJECT_ID"
          env_variable_name: "INFURA_PROJECT_ID"

      - name: Build
        working-directory: ${{ inputs.client_path }}
        env:
          CI: false
          NPM_TOKEN: ${{secrets.NPM_TOKEN}}
        run: ${{ inputs.build_command }}

      - name: Zip artifacts
        uses: montudor/action-zip@v1
        with:
          args: zip -qq -r artifacts.zip ${{ inputs.path_to_static_files_to_upload }}

      - name: Prepare artifacts
        uses: actions/upload-artifact@v2
        with:
          name: build
          path: ${{ github.workspace }}/artifacts.zip

  deploy-static-files:
    name: Deploy static files
    needs: build-static-files
    if: always() && (needs.build-static-files.result == 'success' || needs.build-static-files.result == 'skipped')
    runs-on: ${{ fromJSON(inputs.runs-on) }}
    container:
      image: ${{ inputs.deploy_container }}
    steps:
      - name: Restore build
        if: ${{ inputs.build_static_files }}
        uses: actions/download-artifact@v2
        with:
          name: build
          path: artifacts
      - name: Unzip artifacts
        uses: montudor/action-zip@v1
        with:
          args: unzip -qq artifacts/artifacts.zip -d build
      - name: Checkout repository
        if: ${{ !inputs.build_static_files }}
        uses: actions/checkout@v3
        with:
          path: build
      - name: Install aws-cli
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          apt update
          apt install -y awscli
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.NETWORK_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.NETWORK_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Deploy
        env:
          S3_BUCKET: ${{ secrets.S3_BUCKET_NAME }}
          CF_DISTRIBUTION_ID: ${{ secrets.CF_DISTRIBUTION_ID }}
        run: |
          ${{ inputs.s3_sync_command }}
          aws cloudfront create-invalidation --distribution-id ${CF_DISTRIBUTION_ID} --paths "/*"
