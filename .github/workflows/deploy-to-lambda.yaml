name: Deploy Lambda Function

on:
  workflow_call:
    inputs:
      aws_account_id:
        required: true
        description: Destination AWS Account
        type: string

      lambda_function_name:
        required: true
        description: Name of the target Lambda Function
        type: string

      runs-on:
        required: false
        description: 'Platform to execute on. Default ["self-hosted", "cere-io-large"]'
        type: string
        default: '["self-hosted", "cere-io-large"]'

      build_files:
        required: false
        default: false
        description: Build static files?
        type: boolean

      build_container:
        required: false
        description: Base image to build
        type: string

      install_dependencies_command:
        required: false
        type: string

      install_packages_command:
        required: false
        description: Command to install packages
        type: string

      build_command:
        required: false
        description: Build command
        type: string

      path_to_application_files_to_upload:
        required: false
        default: '.'
        description: Path to files to upload
        type: string

      client_path:
        required: false
        default: '.'
        type: string

    secrets:
      NPM_TOKEN:
        required: false

jobs:
  build:
    if: "${{ inputs.build_files }}"
    name: Build static files
    runs-on: "${{ fromJSON(inputs.runs-on) }}"
    container:
      image: "${{ inputs.build_container }}"
    steps:
      - uses: actions/checkout@v3

      - name: Install system packages
        run: "${{ inputs.install_dependencies_command }}"

      - name: Get yarn cache directory path
        working-directory: "${{ inputs.client_path }}"
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT

      - name: Restore cache
        uses: actions/cache@v3
        id: yarn-cache
        with:
          path: ${{ inputs.client_path }}/${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('${{ inputs.client_path }}/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install packages
        working-directory: "${{ inputs.client_path }}"
        run: "${{ inputs.install_packages_command }}"
        env:
          NPM_TOKEN: "${{secrets.NPM_TOKEN}}"

      - name: Build
        working-directory: "${{ inputs.client_path }}"
        env:
          CI: false
          NPM_TOKEN: "${{secrets.NPM_TOKEN}}"
        run: "${{ inputs.build_command }}"

      - name: Zip artifact
        uses: montudor/action-zip@v1
        with:
          args: |
            zip -qq -r "${{ inputs.client_path }}/artifact.zip" \
              "${{ inputs.client_path }}/${{ inputs.path_to_application_files_to_upload }}"

      - name: Prepare artifact
        uses: actions/upload-artifact@v3
        with:
          name: lambda-function
          path: "${{ github.workspace }}/${{ inputs.client_path }}/artifact.zip"

  archive:
    if: "${{ ! inputs.build_files }}"
    name: Prepare Artifact
    runs-on: "${{ fromJSON(inputs.runs-on) }}"
    steps:
      - uses: actions/checkout@v3

      - name: Zip artifact
        uses: montudor/action-zip@v1
        with:
          args: |
            zip -qq -r "${{ inputs.client_path }}/artifact.zip" \
              "${{ inputs.client_path }}/${{ inputs.path_to_application_files_to_upload }}"

      - name: Prepare artifact
        uses: actions/upload-artifact@v3
        with:
          name: lambda-function
          path: "${{ github.workspace }}/${{ inputs.client_path }}/artifact.zip"

  deploy:
    name: Deploy Lambda Function
    needs:
      - build
      - archive
#    if: (needs.build.result == 'success' && needs.archive.result == 'skipped') || (needs.archive.result == 'success' && needs.build.result == 'skipped')
    runs-on: "${{ fromJSON(inputs.runs-on) }}"
    steps:
      - name: Restore artifact
        uses: actions/download-artifact@v3
        with:
          name: lambda-function
          path: lambda

      - name: Configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: "arn:aws:iam::${{ inputs.aws_account_id }}:role/github"
          role-session-name: "${{ github.event.repository.name }}"
          aws-region: 'us-east-1'

      - name: Upload files
        run:
          aws s3 mv \
            lambda/artifact.zip \
            "s3://cere-deployments-${{ inputs.aws_account_id }}/lambda/${{ inputs.lambda_function_name }}.zip"
          
          aws lambda update-function-code \
            --function-name "${{ inputs.lambda_function_name }}" \
            --s3-bucket "cere-deployments-${{ inputs.aws_account_id }}" \
            --s3-key "lambda/${{ inputs.lambda_function_name }}.zip"
